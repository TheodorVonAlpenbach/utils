;; Local elisp load paths
(setf *local-load-paths* '())

(pushnew-list
 `((".emacs" ,(mb-emacs-local-filename))
   ("package.json" "package-lock.json")
   (".bashrc" ".bash_profile"))
 *simple-swaps* :test #'equal)

(require 'ada-logins)
(require 'org-drill)

;; Sentences, see info node Sentences
(setf sentence-end "[.?!][]\"')]*\\($\\|\t\\| \\)[ \t\n]*")
(setf sentence-end-double-space nil)

;; news
(setf gnus-select-method '(nntp "news.online.no"))
(setf user-full-name "Mats Bergstr√∏m")

;; tags
;; (setf tags-file-name nil)
(setf tags-table-list (list (expand-file-name "~/.MBTAGS")))

;; lynx
(setf *lynx-proxy-dir* (expand-file-name "lynx-proxy" *local-data-dir*))
(setf *lynx-auth* "")

;; diary file (mandatory to use #'calendar)
(setf diary-file (expand-file-name "office/diary" *local-data-dir*))

;; load favorite files (note that nil/t means position cursor at top/bottom)
;; but first we have to get rid of the tramp file, which may block ssh:
(let ((tramp-file "~/.emacs.d/tramp"))
  (when (file-exists-p tramp-file)
    (delete-file tramp-file)))

(defconst +cygwin-home+
  "/media/mats/Windows/cygwin64/home/mats.bergstrom"
  "See /etc/fstab for the mount entry. If the windows partition should change,
edit fstab accordingly (as su), save, and run
sudo mount -a.")

(setf *my-favorites*
      `((,+mb-lisp-dir+ ".emacs")
	(,+mb-lisp-dir+ "utils/mb-utils-strings.el")
	(,+mb-lisp-dir+ "utils/mb-utils-time.el")
	(,+mb-lisp-dir+ "utils/mb-utils-buffer.el")
	(,+mb-lisp-dir+ "utils/mb-sequences.el")
	(,+mb-lisp-dir+ "global/mb-indent.el")
	(,+mb-lisp-dir+ "mode-extensions/mb-lisp.el")
	(,+mb-lisp-dir+ "mode-extensions/mb-evil.el")
	(,+mb-lisp-dir+ "mode-extensions/mb-evil-map.el")
	(,+mb-lisp-dir+ "external/curl.el")
	(,+mb-lisp-dir+ "div/scratch.el")
	(,+mb-lisp-dir+ "projects/ada/ada-mysql.el")
	(,+mb-lisp-dir+ "projects/ada/ada-logins.el")
	(,+mb-lisp-dir+ "data/historie.org")

	(,+home-dir+ "projects/quiz/ferskvare.org" :point :end :keyboard :no)
	(,+home-dir+ "doc/log.org" :point :end :keyboard :no)
	(,+home-dir+ "doc/manifest" :keyboard :no)
	))
;;/ssh:ssh:~/doc/arbeidslog-new

;; lisp
(setf inferior-lisp-program "sbcl --dynamic-space-size 5000")

;; set slime arguments
;; (require 'slime)
;; (setf (cadar (cl-member "sbcl" slime-lisp-implementations :test #'string= :key #'car))
     ;; (list "sbcl" "--dynamic-space-size 6000"))
;;slime-lisp-implementations


;; dot
(setf *dot-dir* "c:/Program Files/Graphviz2.30/bin/")
