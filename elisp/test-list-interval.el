(require 'ert)
(require 'list-interval)

(ert-deftest test-i-contain-p ()
  "Test of `i-contain-p'"
  (should (i-contain-p '(0 1) 0))
  (should (i-contain-p '(0 1) 0 nil))
  (should-not (i-contain-p '(0 1) 0 t))
  (should (i-contain-p '(0 1) 0.5))
  (should (i-contain-p '(0 1) 1))
  (should-not (i-contain-p '(0 1) 1 t))
  (should-not (i-contain-p '(0 1) -1))
  (should-not (i-contain-p '(0 1) -1 t))
  (should-not (i-contain-p '(0 1) 2)))

(ert-deftest test-i-within-p ()
  "Test of `i-within-p'"
  (should (i-within-p 1 '(0 3)))
  (should (i-within-p '(1 2) '(0 3)))
  (should (i-within-p '(0 2) '(0 3)))
  (should (i-within-p '(1 3) '(0 3)))
  (should (i-within-p '(0 3) '(0 3)))
  (should-not (i-within-p '(-2 -1) '(0 3)))
  (should-not (i-within-p '(-2 0) '(0 3)))
  (should-not (i-within-p '(-2 1) '(0 3)))
  (should-not (i-within-p '(-2 3) '(0 3)))
  (should-not (i-within-p '(-2 4) '(0 3)))
  (should-not (i-within-p '(0 5) '(0 3)))
  (should-not (i-within-p '(1 5) '(0 3)))
  (should-not (i-within-p '(3 5) '(0 3)))
  (should-not (i-within-p '(4 5) '(0 3)))
  (should-not (i-within-p '(6 5) '(0 3)))
  (should (i-within-p '(1 2) '(0 3) t))
  (should-not (i-within-p '(0 2) '(0 3) t))
  (should-not (i-within-p '(1 3) '(0 3) t))
  (should-not (i-within-p '(0 3) '(0 3) t))
  (should-not (i-within-p '(-2 -1) '(0 3) t))
  (should-not (i-within-p '(-2 0) '(0 3) t))
  (should-not (i-within-p '(-2 1) '(0 3) t))
  (should-not (i-within-p '(-2 3) '(0 3) t))
  (should-not (i-within-p '(-2 4) '(0 3) t))
  (should-not (i-within-p '(0 5) '(0 3) t))
  (should-not (i-within-p '(1 5) '(0 3) t))
  (should-not (i-within-p '(3 5) '(0 3) t))
  (should-not (i-within-p '(4 5) '(0 3) t))
  (should-not (i-within-p '(6 5) '(0 3) t)))

(ert-deftest test-i-touch-p ()
  "Test of `i-touch-p'"
  (should-not (i-touch-p '(0 1) '(2 4)))
  (should (i-touch-p '(0 2) '(2 4)))
  (should-not (i-touch-p '(3 2) '(2 4)))
  (should-not (i-touch-p '(0 3) '(2 4)))
  (should-not (i-touch-p '(0 4) '(2 4)))
  (should-not (i-touch-p '(0 5) '(2 4)))
  (should-not (i-touch-p '(2 4) '(2 4)))
  (should (i-touch-p '(2 2) '(2 4)))
  (should (i-touch-p '(4 4) '(2 4)))
  (should (i-touch-p '(4 100) '(2 4)))
  (should-not (i-touch-p '(5 4) '(2 4)))
  (should-not (i-touch-p '(5 10) '(2 4))))

(ert-deftest test-i-interval-p ()
  "Test of `i-interval-p'"
  (should-not (i-interval-p nil))
  (should-not (i-interval-p '(1 0)))
  (should (i-interval-p '(1 1)))
  (should (i-interval-p '(1 2))))

(ert-deftest test-i-overlap-p ()
  "Test of `i-overlap-p'"
  (should-not (i-overlap-p nil nil))
  (should-not (i-overlap-p '(3 1) '(4 2)))
  (should-not (i-overlap-p '(3 1) '(2 4)))
  (should-not (i-overlap-p '(1 3) '(4 2)))
  (should-not (i-overlap-p nil '(1 2)))
  (should-not (i-overlap-p '(1 2) nil))
  (should-not (i-overlap-p '(0 2) '(3 5)))
  (should (i-overlap-p '(0 3) '(3 5)))
  (should (i-overlap-p '(0 3) '(3 5) nil))
  (should-not (i-overlap-p '(0 3) '(3 5) t))
  (should (i-overlap-p '(0 4) '(3 5)))
  (should (i-overlap-p '(0 4) '(3 5) t))
  (should (i-overlap-p '(0 5) '(3 5)))
  (should (i-overlap-p '(0 5) '(3 5) t))
  (should (i-overlap-p '(0 5) '(3 6) nil))
  (should (i-overlap-p '(0 5) '(3 6) t)))

(ert-deftest test-i-disjoint-p ()
  "Test of `i-disjoint-p'"
  (should (i-disjoint-p '(0 1) '(2 3)))
  (should (i-disjoint-p '(0 1) '(2 3) t))
  (should-not (i-disjoint-p '(0 2) '(2 3)))
  (should (i-disjoint-p '(0 2) '(2 3) t)))

(ert-deftest test-i-intersection ()
"Test of `i-intersection'"
  (should-not (i-intersection nil nil))
  (should-not (i-intersection '(3 1) '(4 2)))
  (should-not (i-intersection '(3 1) '(2 4)))
  (should-not (i-intersection '(1 3) '(4 2)))
  (should-not (i-intersection nil '(1 2)))
  (should-not (i-intersection '(1 2) nil))
  (should-not (i-intersection '(0 2) '(3 5)))
  (should (equal (i-intersection '(0 3) '(3 5)) '(3 3)))
  (should (equal (i-intersection '(3 5) '(0 3)) '(3 3)))
  (should (equal (i-intersection '(0 4) '(3 5)) '(3 4)))
  (should (equal (i-intersection '(3 5) '(0 4)) '(3 4)))
  (should (equal (i-intersection '(0 5) '(3 5)) '(3 5)))
  (should (equal (i-intersection '(3 5) '(0 5)) '(3 5)))
  (should (equal (i-intersection '(0 5) '(3 6)) '(3 5)))
  (should (equal (i-intersection '(3 6) '(0 5)) '(3 5))))

(ert-deftest test-i-union ()
  "Test of `i-union'"
  (should (equal (i-union '(0 2) '(1 3)) '(0 3)))
  (should (equal (i-union '(0 2) '(10 30)) '(0 30)))
  (should (equal (i-union '(0 2) '(30 10)) '(0 2)))
  (should (equal (i-union nil '(30 10)) nil))
  (should (equal (i-union nil '(10 30)) '(10 30))))

(provide 'test-list-interval)
